import os
import json
import requests
import boto3
from bs4 import BeautifulSoup
from langchain.chains import LLMChain
from langchain.llms.bedrock import Bedrock
from langchain.prompts import PromptTemplate
# Set the AWS profile to use
os.environ["AWS_PROFILE"] = "rishith"
# Initialize Bedrock client
bedrock_client = boto3.client(
    service_name="bedrock-runtime",
    region_name="us-west-2"
)
# Model ID for Bedrock
modelID = "anthropic.claude-v2"
# Initialize the Bedrock LLM
llm = Bedrock(
    model_id=modelID,
    client=bedrock_client,
    model_kwargs={"max_tokens_to_sample": 2000, "temperature": 0.9}
)
def extract_news_content(url):
    response = requests.get(url)
    if response.status_code != 200:
        return None
    soup = BeautifulSoup(response.content, 'html.parser')
    paragraphs = soup.find_all('p')
    content = ' '.join([para.get_text() for para in paragraphs])
    return content
def my_chatbot(content):
    prompt = PromptTemplate(
        input_variables=["content"],
        template="You are a chatbot. Analyze the news content and provide the number of citations, the reliability percentage, and the actual news content.\n\nContent: {content}"
    )
    bedrock_chain = LLMChain(llm=llm, prompt=prompt)
    response = bedrock_chain({'content': content})
    return response['text']
def lambda_handler(event, context):
    try:
        # Parse input from event
        body = json.loads(event['body'])
        url = body.get('url', '')
        if not url:
            return {
                'statusCode': 400,
                'body': json.dumps({'error': 'No URL provided'})
            }
        # Extract news content from the URL
        news_content = extract_news_content(url)
        if not news_content:
            return {
                'statusCode': 404,
                'body': json.dumps({'error': 'Unable to extract content from the provided URL'})
            }
        # Get response from chatbot
        response_text = my_chatbot(news_content)
        # Parse the response to extract required information (example logic)
        parsed_response = json.loads(response_text)
        num_citations = parsed_response.get('num_citations', 0)
        reliability_percentage = parsed_response.get('reliability_percentage', 0)
        actual_news = parsed_response.get('actual_news', news_content)
        # Return response
        return {
            'statusCode': 200,
            'body': json.dumps({
                'num_citations': num_citations,
                'reliability_percentage': reliability_percentage,
                'actual_news': actual_news
            })
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }
